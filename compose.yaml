services:
  server:
    build:
      context: .
    environment:
      NODE_ENV: production
      auth_token: ${auth_token}
      loki_host: ${loki_host}
      loki_user: ${loki_user}
      loki_token: ${loki_token}
    volumes:
      - static:/srv
    ports:
      - 3000:3000

  caddy:
    image: caddy:2-alpine
    restart: unless-stopped
    environment:
      host_name: ${host_name}
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - static:/srv
      - caddy_data:/data
      - caddy_config:/config
    ports:
      - 80:80
      - 443:443

volumes:
  static:
  caddy_data:
  caddy_config:
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

